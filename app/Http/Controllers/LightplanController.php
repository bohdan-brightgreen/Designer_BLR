<?phpnamespace App\Http\Controllers;use Request;//use Response;//use Log;use \App;use App\Services\PDFService;use App\Services\FloorplanService;class LightplanController extends Controller{    private $PDFService;    private $FloorplanService;    public function __construct(        PDFService $pdfService,        FloorplanService $floorplanService    ) {      		        $this->middleware('sso');               $this->PDFService = $pdfService;        $this->FloorplanService = $floorplanService;    }    public function index()    {	            $user = session('user');   		        if (!empty($user)) {            unset($user['occupation']);            unset($user['typeof_user_role_id']);            unset($user['is_email_confirmed']);            unset($user['is_active']);            unset($user['created_at']);            unset($user['updated_at']);            $user = json_encode($user);        }            return view('app', [                        'user' => $user        ]);    }    public function upload()    {        $data = '';				        if (Request::file('floorplan_file')->isValid()) {	// $vvvar = Request::file('floorplan_file');		 // echo "<script type='text/javascript'>alert('$vvvar');</script>";            $result = $this->FloorplanService->process_floorplan_upload(Request::all());            $data = json_encode([                'success' => isset($result[0]) ? $result[0] : false,                'result' => isset($result[1]) ? $result[1] : null,                'is_new_project' => Request::input('is_new_project', true)            ]);        }        return view('lightplan.upload', [            'data' => $data        ]);    }    public function image_crop()    {        $result = $this->FloorplanService->crop_image(Request::all());		$data = json_encode([            'success' => isset($result[0]) ? $result[0] : false,            'result' => isset($result[1]) ? $result[1] : null        ]);		return view('lightplan.image_crop', [            'data' => $data        ]);    }    public function pdf()    {                 $products = ['brightgreen' => []];        $productCodes = [];        $data = json_decode(Request::input('data', ''), true);				        if ($data['datasheets']) {		            if (!empty($data) && !empty($data['designs'])) {			                foreach ($data['designs'] as $design) {                    if (empty($design['areas'])) {				                        continue;                    }                    foreach ($design['areas'] as $area) {                        if (empty($area['designer_data']['rooms'])) {						                            continue;                        }                        foreach ($area['designer_data']['rooms'] as $room) {                            if (empty($room['lights'])) {							                                continue;                            }                            foreach ($room['lights'] as $light) {                                if (empty($light['code'])) {                                    continue;                                }                                $productCodes[$light['code']] = $light['code'];                            }                        }                    }                }            }            if (!empty($productCodes)) {                $lights = $this->lights();                $lights = json_decode($lights, true);                if (!empty($lights) && $lights['error']['code'] == 200) {                    foreach ($lights['result'] as $idx => $series) {                        // Remove Loomi datasheets                        if ($idx == 'Loomi') {                            continue;                        }                        foreach ($series as $light) {                            if (empty($light['products'])) {                                continue;                            }                            foreach ($light['products'] as $product) {                                if (isset($productCodes[$product['code']])) {                                    $products['brightgreen'][] = $light['id'];                                }                            }                        }                    }                }                $products['brightgreen'] = array_unique($products['brightgreen']);            }        }        $result = $this->PDFService->create(Request::input('data', ''), Request::input('pdf_token_cookie', ''), $products);        return response()->download($result);    }    private function lights()    {        $ch = curl_init();        if (App::environment() == 'local') {            curl_setopt($ch, CURLOPT_URL, 'https://api.bg.dev/brightgreen/v2/lights/details');        } else {            curl_setopt($ch, CURLOPT_URL, 'https://api.brightgreen.com/brightgreen/v2/lights/details');        }        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);        curl_setopt($ch, CURLOPT_HEADER, false);        curl_setopt($ch, CURLOPT_POST, false);        $result = curl_exec($ch);        curl_close($ch);        return $result;    }}