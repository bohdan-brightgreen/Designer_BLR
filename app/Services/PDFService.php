<?phpnamespace App\Services;use TCPDF;use Datasheets\Services\DatasheetService;use App\Contracts\ExportImageInterface;class PDF extends TCPDF{    protected $headerText = 'Summary';    public function Header()    {        if ($this->page == 1) {            return;        }        $mainColour = [0, 169, 80];        $this->SetTextColorArray($mainColour);        $this->Text(10, 4, $this->headerText, false, false, true, 0, 1);        $this->Ln(3);        $y = $this->GetY();        $this->Line(0, $y, $this->getPageWidth(), $y, ['width' => 1, 'color' => $mainColour]);    }    public function Footer()    {        //    }}class PDFService extends PDF{    protected $pdf = null;    public $obj = null;    public $physical_assets = [];    protected $pathImages = '';    protected $cachePath = '';    protected $cache = [];		protected $path_Eoxys = '';    protected $settings = [        'margin' => [            'left'   => 10,            'top'    => 20,            'right'  => 10,            'bottom' => 0        ],        'orientation' => 'L',        'format' => 'A4'    ];    protected $colours = [        'brightgreen' => [0, 169, 80],    // #00a950        'text'        => [128, 128, 128], // #808080        'border'      => [204, 204, 204], // #cccccc        'background'  => [255, 255, 255], // #ffffff        'subtitle'    => [255, 255, 255], // #ffffff        'stripe'      => [242, 242, 242], // #f2f2f2        'stripe_dark' => [226, 226, 226], // #e2e2e2    ];        protected $fontFamily = [        'default' => 'dinlight',        'bold' => 'dinmedium'    ];        protected $fontSize = [        'header' => 18,        'main_title' => 20,        'title' => 16,        'body' => 10    ];    private $user = [];    public function __construct(        ExportImageInterface $exportImage    ) {        $this->ExportImage = $exportImage;		$this->outputPath = 'uploads/floorplans';    }    public function create($json_data, $token, $products)    {        $this->pdf = new PDF();		$this->path_Eoxys =$this->outputPath . '/json/'. uniqid() .'.json';       $fp = fopen($this->path_Eoxys, 'x');fwrite($fp, $json_data);fclose($fp);        $this->obj = json_decode($json_data);		        $this->user = session('user');        if (isset($this->obj->pdf_format) && in_array($this->obj->pdf_format, ['A3', 'A4'])) {            $this->settings['format'] = $this->obj->pdf_format;        }        $this->pathImages = public_path() . '/img/pdf/';        $this->cachePath = storage_path() . '/pdf/';        $this->pdf->SetCreator('TCPDF');        $this->pdf->SetAuthor('Brightgreen LightPlan');        $this->pdf->SetTitle($this->obj->title);        $this->pdf->SetSubject('Brightgreen LightPlan Plan');        $this->pdf->SetKeywords('Brightgreen, LightPlan, Circuit');        // set fonts        $this->pdf->setHeaderFont([$this->fontFamily['bold'], '', $this->fontSize['header']]);        $this->pdf->setFooterFont([$this->fontFamily['default'], '', 8]);        $this->pdf->SetFont($this->fontFamily['default'], '', 10);        $this->pdf->SetDefaultMonospacedFont('courier');        //set margins        $this->pdf->SetHeaderMargin(2);        $this->pdf->SetFooterMargin(10);        //set auto page breaks        $this->pdf->SetAutoPageBreak(true, 1);        $this->setContent();        $this->generateFirstPage();        $this->pdf->SetMargins($this->settings['margin']['left'], $this->settings['margin']['top'], $this->settings['margin']['right'], true);        if (isset($this->obj->designs[0])) {		            foreach ($this->obj->designs[0]->areas as $area) {                if (count($area->designer_data->rooms) > 0) {                    $this->generateSummaryPage($area);                    $this->generateFrontPage($area);                    $this->generateSummaryPages($area);                    $this->generateAreaNotesPage($area);                }            }        }        $this->generateNotesPage();        if (ob_get_contents() || ob_get_length()) {            ob_clean();        }        //used to send back token (so we can see when response returns)        setcookie('pdf_token_cookie', $token);        $filename = 'LightPlan-' . $this->obj->title . time();        $filePath = $this->cachePath . $filename . '.pdf';        $tmpFilePath = $this->cachePath . uniqid() . '.pdf';        $this->pdf->Output($tmpFilePath, 'F');        $DatasheetService = new DatasheetService();        $DatasheetService->extend($filename, [$tmpFilePath], $products);        // Clean up        unlink($tmpFilePath);        foreach ($this->cache as $file) {            unlink($file);        }        return $filePath;    }        private function setContent()    {        $this->pdf->SetFont($this->fontFamily['default']);        $this->pdf->SetFontSize($this->fontSize['body']);        $this->pdf->SetTextColorArray($this->colours['text']);    }    private function addMainTitle($text)    {        $this->pdf->SetFont($this->fontFamily['bold']);        $this->pdf->SetFontSize($this->fontSize['main_title']);        $this->pdf->Text($this->pdf->GetX(), $this->pdf->GetY(), $text, false, false, true, 0, 1, 'C');        $this->pdf->Ln(5);    }    private function addSubTitle($text, $cellWidth = 0, $ln = 2, $padding = 3, $fillColor = [204, 204, 204])    {        // [204, 204, 204] #ccc        $this->pdf->SetFont($this->fontFamily['default']);	    $this->pdf->SetFontSize($this->fontSize['title']);	    $this->pdf->SetFillColorArray($fillColor);	    $this->pdf->SetTextColorArray($this->colours['subtitle']);	    $this->pdf->SetCellPaddings($padding, 1, $padding, 1);	    $borderStyle = ['LTRB' => ['width' => 0.1, 'color' => $fillColor]];	    $this->pdf->Cell($cellWidth, 0, $text, $borderStyle, $ln, '', true);	    $this->setContent();    }		public function generateFirstPage()	{		$this->pdf->SetMargins(1.5, 0, 0, false);		$this->pdf->AddPage($this->settings['orientation'], $this->settings['format']);		$startX = $this->settings['margin']['left'];		// Background image		$this->pdf->Image($this->pathImages . 'frontpage.jpg', '', '', 0, 0, '', '', 'B', false, 600, 'R');        // Company logo when it's ready		/*$externalLogoPath = 'https://cdn.brightgreen.com/images/store-logos/';		$logoPath = $this->pathImages;		$logo = 'lightplan.png';		if (isset($this->user['Company']['logo'])			&& !empty($this->user['Company']['logo'])			&& $this->isImageExists($externalLogoPath . $this->user['Company']['logo'])		) {			$logo = $this->user['Company']['logo'];			$logoPath = $externalLogoPath;		}		if (!empty($logo)) {		    $this->pdf->Image($logoPath . $logo, $startX, 10, 0, 20, '', '', '', 2, 600);		}*/        $this->pdf->Image($this->pathImages . 'lightplan.png', $startX, 10, 0, 20, '', '', '', 2, 600);		$this->pdf->SetXY($startX, 40);		$this->pdf->SetFont($this->fontFamily['bold']);		$this->pdf->SetFontSize($this->fontSize['main_title']);		$this->pdf->Text($this->pdf->GetX(), $this->pdf->GetY(), $this->obj->title, false, false, true, 0, 1, 'L');		$this->pdf->Ln(1);		$this->pdf->SetX($startX);		$this->pdf->SetFont($this->fontFamily['default']);		$this->pdf->SetFontSize($this->fontSize['header']);		$this->pdf->Text($this->pdf->GetX(), $this->pdf->GetY(), $this->obj->designs[0]->title, false, false, true, 0, 1, 'L');		$this->pdf->Ln(1);		$this->pdf->SetX($startX);		$this->pdf->SetFont($this->fontFamily['default']);		$this->pdf->SetFontSize($this->fontSize['title']);		$this->pdf->Text($this->pdf->GetX(), $this->pdf->GetY(), 'Client: ' . $this->obj->client_name, false, false, true, 0, 1, 'L');	}		public function generateSummaryPage($area)	{	    $this->pdf->headerText = 'Summary';		$this->pdf->AddPage();		$this->addMainTitle($area->title);		$this->addSubTitle($area->title . ' summary', 0, 1, 3, $this->colours['brightgreen']);        $startX = $this->pdf->GetX();		$this->addGroup('Electrical',  [		    'Total Power: ' . $area->designer_data->reached_wattage . 'W',		    'Legal Power Limit: ' . $area->designer_data->recommended_wattage_sqm . 'W p/sqm',		    'Average Power: ' . $area->designer_data->reached_wattage_sqm . 'W p/sqm'		], $startX);		$this->addGroup('Photometric',  [		    'Recommended Lumens: ' . $area->designer_data->recommended_lumens . 'lm',		    'Reached Lumens: ' . $area->designer_data->reached_lumens . 'lm'		], $startX);	}		public function generateFrontPage($area)	{        $this->pdf->AddPage();        $headerHeight = 15;	    $footerHeight = 25;	    $scheduleWidth = 55;	    $imagePadding = 3;        $image = $this->cachePath . uniqid() . '.png';           $this->cache[] = $image;		// $value = print_r($area,true);		// $myText = $area->export_image_id;				        if ($area->export_image_id) {		            $exportedImage = $this->ExportImage->get($area->export_image_id);            file_put_contents($image, base64_decode($exportedImage));            $this->ExportImage->delete($area->export_image_id);        }                		//file_put_contents($image, base64_decode($area->image));			// there is an issue with transparencies when the project has no background image		// the following fixed the issue        if (!isset($area->has_background) || !$area->has_background) {		//echo $image;		            $src = imagecreatefrompng($image);            // Get the width and height.			            $width = imagesx($src);            $height = imagesy($src);            // echo "<script> function(){ alert($width);};</script>";			// echo "<script> function(){ alert($height);};</script>";            // Create a white background, the same size as the original.            $bg = imagecreatetruecolor($width, $height);            $white = imagecolorallocate($bg, 255, 255, 255);            imagefill($bg, 0, 0, $white);            // Merge the two images.            imagecopyresampled(                $bg, $src,                0, 0, 0, 0,                $width, $height,                $width, $height);            imagepng($bg,  $image, 0);        }		$startX = $this->pdf->GetX();		$startY = $this->pdf->GetY();		$margins = $this->pdf->getMargins();		$contentWidth = $this->pdf->getPageWidth() - $margins['left'] - $margins['right'];		$contentHeight = $this->pdf->getPageHeight() - $margins['top'] - $margins['bottom'];		$imageWidth = $contentWidth - $scheduleWidth - (2 * $imagePadding);		$imageHeight = $contentHeight - $footerHeight - $headerHeight - (2 * $imagePadding);		$this->generateAreaContainer($area, $footerHeight);		$this->pdf->SetXY($startX, $startY);		$this->generateSchedule($area, $scheduleWidth);		$this->pdf->Image($image, $startX + $imagePadding, $startY + $imagePadding,		              $imageWidth, $imageHeight, '', '', 'T', 2, 300, '', false, false, 0, 'CM');	}	public function generateAreaContainer($area, $footerHeight)	{	    $margins = $this->pdf->getMargins();	    $height = $this->pdf->getPageHeight() - $this->pdf->GetY() - $margins['bottom'] - 12; // include padding for copy	    $contentWidth = $this->getContentWidth();	    $this->setContent();	    $borderStyle = ['LTRB' => ['width' => 0.1, 'color' => $this->colours['border']]];	    $this->pdf->Cell(0, $height, '', $borderStyle, 1);	    $this->pdf->SetFontSize(8);	    $this->pdf->Text($this->pdf->GetX(), $this->pdf->GetY(), 'Created in LightPlan by brightgreen.com', false, false, true, 0, 1, 'R');	    $lineHeight = $footerHeight / 3;	    	    $startY = $margins['top'] + $height - $footerHeight;	    $this->pdf->SetFontSize($this->fontSize['body']);	    $this->pdf->SetY($startY);	    $this->pdf->MultiCell(($contentWidth * 15 / 100), $footerHeight, 'Lighting Design', $borderStyle, 'L', false, 0);	    $this->pdf->MultiCell(($contentWidth * 45 / 100), $footerHeight, "PREPARE FOR:\n" . $area->title, $borderStyle, 'L', false, 0);	    	    $cellWidth = $contentWidth * 20 / 100;	    $currentX = $this->pdf->GetX();	    $this->pdf->MultiCell($cellWidth, $lineHeight, 'Client: ' . (($this->obj->client_name) ? $this->obj->client_name : ''), $borderStyle, 'L', false, 1, '', '', true, 0, false, true, $lineHeight, 'M', true);	    $this->pdf->SetX($currentX);	    $this->pdf->MultiCell($cellWidth, $lineHeight, 'Date: ' . date('d/m/Y'), $borderStyle, 'L', false, 1, '', '', true, 0, false, true, $lineHeight, 'M', true);	    $this->pdf->SetX($currentX);	    $this->pdf->MultiCell($cellWidth, $lineHeight, 'Square Metres: ' . $area->designer_data->square_metres . 'sqm', $borderStyle, 'L', false, 1, '', '', true, 0, false, true, $lineHeight, 'M', true);	    $currentX = $currentX + $cellWidth;	    $this->pdf->SetXY($currentX, $startY);	    $this->pdf->MultiCell($cellWidth, $lineHeight, 'Designer: ' . (isset($this->user['name']) ? $this->user['name'] : ''), $borderStyle, 'L', false, 1, '', '', true, 0, false, true, $lineHeight, 'M', true);	    $this->pdf->SetX($currentX);	    $this->pdf->MultiCell($cellWidth, $lineHeight, 'Contact:', $borderStyle, 'L', false, 1, '', '', true, 0, false, true, $lineHeight, 'M', true);	    $this->pdf->SetX($currentX);	    $this->pdf->MultiCell($cellWidth, $lineHeight, 'Email: ' . (isset($this->user['email']) ? $this->user['email'] : ''), $borderStyle, 'L', false, 1, '', '', true, 0, false, true, $lineHeight, 'M', true);	}	public function generateSummaryPages($area)	{		$this->pdf->headerText = 'Summary';		$this->pdf->AddPage();        $maxColumns = ($this->settings['format'] == 'A3') ? 5 : 3;		$spaceBetweenColumns = 5;		$contentWidth = $this->getContentWidth();		$cellWidth = ($contentWidth - (($maxColumns - 1) * $spaceBetweenColumns)) / $maxColumns;				$startX = $this->pdf->GetX();		$startY = $this->pdf->GetY();		$currentCol = 0;		$isFirstPage = true;		foreach ($area->designer_data->rooms as $room) {		    if (!($currentCol % $maxColumns) && !$isFirstPage) {		        $currentCol = 0;		        $this->pdf->AddPage();		        $startY = $this->pdf->GetY();		    }		    		    $currentX = $startX + ($cellWidth * $currentCol) + ($spaceBetweenColumns * $currentCol);		    $this->pdf->SetXY($currentX, $startY);		    // Subtitle		    $this->addSubTitle($area->title . ' - ' . $room->display_name, $cellWidth);		    $this->addGroup('Electrical',  [		        'Total Power: ' . $room->reached_wattage . 'W',		        'Recommended Wattage: ' . $room->recommended_wattage . 'W',		        'Average Power: ' . $room->reached_wattage_sqm . 'W p/sqm'		    ], $currentX, $cellWidth);		    $this->addGroup('Photometric',  [		        'Recommended Lumens: ' . $room->recommended_lumens . 'lm',		        'Reached Lumens: ' . $room->reached_lumens . 'lm',		        'Reflectivity: ' . $room->reflectivity		    ], $currentX, $cellWidth);		    $room_assets = $this->countRoomAssets($room);		    $room_switches = $this->countRoomAssets($room, 'light_switches');		    $room_assets = array_merge($room_assets, $room_switches);		    if ($this->obj->include_furniture) {		        $room_furniture = $this->countRoomAssets($room, 'assets');		        $room_assets = array_merge($room_assets, $room_furniture);		    }				    $assets = [];		    foreach ($room_assets as $room_asset) {		        $assets[] = $room_asset->name . ': ' . $room_asset->count;		    }		    if (!empty($assets)) {		        $this->addGroup('Assets',  $assets, $currentX, $cellWidth);		    }		    		    $currentCol++;		    $isFirstPage = false;		}	}	function generateSchedule($area, $width)	{	    $cellNameWidth = $width * 70 / 100;	    $cellQtyWidth = $width * 30 / 100;	    $colorCircleRadius = 2;	    $margins = $this->pdf->getMargins();	    $startX = $this->pdf->getPageWidth() - $margins['right'] - $cellNameWidth - $cellQtyWidth;		$this->populateAllAssetCounts($area);		// add in the wie length		$this->physical_assets['Wiring'] = new Physical_Asset('Wiring', '~' . round($area->designer_data->wire_length, 2) . 'm');			$this->pdf->SetFontSize(12);		$border = ['width' => 0.1, 'color' => $this->colours['border']];		$this->pdf->SetX($startX);		$this->pdf->SetCellPadding(1);		$this->pdf->Cell($cellNameWidth, 0, 'Product', ['LTB' => $border], 0, 'L', false, '', 0, false, 'T', 'C');		$this->pdf->SetCellPaddings(1, 1, 3, 1);		$this->pdf->Cell($cellQtyWidth, 0, 'Units', ['TRB' => $border], 1, 'R', false, '', 0, false, 'T', 'C');		$this->setContent();		$count = 0;		$maxCount = count($this->physical_assets);		foreach ($this->physical_assets as $asset) {            $fillColour = ($count % 2) ? $this->colours['stripe'] : $this->colours['background'];		    $this->pdf->SetFillColorArray($fillColour);		    		    $borderCol1 = 'L';		    $borderCol2 = 'R';		    if ($count == 0) {		        $borderCol1 .= 'T';		        $borderCol2 .= 'T';		    		    } else if ($count == ($maxCount - 1)) {		        $borderCol1 .= 'B';		        $borderCol2 .= 'B';		    }		    		    $y = $this->pdf->GetY();		    $this->pdf->SetX($startX);            if (empty($asset->colour)) {                $this->pdf->SetCellPadding(1);                $this->pdf->Cell($cellNameWidth, 0, $asset->name, [$borderCol1 => $border], 0, 'L', true, '', 1, false, 'T', 'C');            } else {                $this->pdf->SetCellPaddings(($colorCircleRadius * 2) + 2.5, 1, 1, 1);                $this->pdf->Cell($cellNameWidth, 0, strtoupper($asset->name), [$borderCol1 => $border], 0, 'L', true, '', 1, false, 'T', 'C');                $currentX = $this->pdf->GetX();                $currentY = $this->pdf->GetY();                $this->pdf->Circle($startX + 1 + $colorCircleRadius, $y + 1 + $colorCircleRadius, $colorCircleRadius, 0, 360, 'F', [], $this->hex2rgb($asset->colour));                $this->pdf->SetFillColorArray($fillColour);                $this->pdf->SetXY($currentX, $currentY);            }		    $this->pdf->SetCellPaddings(1, 1, 3, 1);		    $this->pdf->Cell($cellQtyWidth, 0, $asset->count, [$borderCol2 => $border], 1, 'R', true, '', 0, false, 'T', 'C');		    $count++;		}	}	public function generateAreaNotesPage($area)	{		if (empty($area->notes)) {		    return;		}		$this->pdf->headerText = 'Notes';		$this->pdf->AddPage();		$contentWidth = $this->getContentWidth();		$cellNumWidth = 15;		$cellNoteWidth = $contentWidth - $cellNumWidth;		$borderStyle = ['LTRB' => ['width' => 0.1, 'color' => $this->colours['border']]];		// Subtitles		$this->addSubTitle('#', $cellNumWidth, 0);		$this->addSubTitle('Note', $cellNoteWidth, 1);		foreach ($area->notes as $note) {		    $this->pdf->Cell($cellNumWidth, 0, $note->id, $borderStyle, 0, '', false);		    $this->pdf->Cell($cellNoteWidth, 0, $note->notetext, $borderStyle, 1, '', false);		}	}		public function generateNotesPage()	{	    if (!isset($this->obj->designs[0]) || empty($this->obj->designs[0]->description)) {	        return;	    }		$this->pdf->headerText = 'Notes';		$this->pdf->AddPage();		$this->addSubTitle('Additional notes', 0, 1);		$this->pdf->MultiCell(0, 0, $this->obj->designs[0]->description, 0, 'L');	}		//Small utility function to count and keep track of the different types of physical	//assets within the document for the item totals on the "Schedule" page.	function countRoomAssets($room, $array_name = 'lights')	{		$results = [];		foreach ($room->{$array_name} as $asset) {			if ($array_name == 'rooms'){			$type= "Number of Rooms";		}else{			$type = $asset->type;		}						if (isset($asset->is_custom) && $asset->is_custom) {				$type = $asset->code;			}				if (!isset($results[$type])) {                if ($type == 'solar-panel') {                    $results[$type] = new Physical_Asset($asset->name, null, null, null, $array_name);                } else {                    $colour = isset($asset->display_colour) ? $asset->display_colour : null;                    $results[$type] = new Physical_Asset($type, null, $colour, null, $array_name);                }			}			$results[$type]->count++;		}		return $results;	}		function populateAllAssetCounts($area)	{		$this->physical_assets = [];				$this->mergeAssetsArray($this->countRoomAssets($area->designer_data, 'rooms'));		foreach ($area->designer_data->rooms as $room) {			$this->mergeAssetsArray($this->countRoomAssets($room));			$this->mergeAssetsArray($this->countRoomAssets($room, 'light_switches'));			if ($this->obj->include_furniture) {				$this->mergeAssetsArray($this->countRoomAssets($room, 'assets'));			}		}	}		function mergeAssetsArray($arr)	{		foreach (array_keys($arr) as $key) {			if (!isset($this->physical_assets[$key])) {				$this->physical_assets[$key] = $arr[$key];			} else {				$this->physical_assets[$key]->count = $this->physical_assets[$key]->count + $arr[$key]->count;			}		}	}		private function isImageExists($url)	{		$ch = curl_init($url);		curl_setopt($ch, CURLOPT_NOBODY, true);		$request = curl_exec($ch);		if ($request !== false) {			$result = curl_getinfo($ch, CURLINFO_HTTP_CODE);		}		curl_close($ch);		return (isset($result) && $result == 200) ? true : false;	}			private function getContentWidth()    {	    $margins = $this->pdf->getMargins();	    return $this->pdf->getPageWidth() - $margins['left'] - $margins['right'];	}		private function addGroup($title, $items, $startX, $cellWidth = 0, $includePadding = true)    {	    $padding = 3;	    $lineWidth = 0.7;	    $cellHeight = 7;	    if ($includePadding) {	        if ($cellWidth <= 0) {	            $cellWidth = $this->getContentWidth();	        }            $cellWidth -= (2 * $padding);            $startX += $padding;	    }        $this->pdf->SetDrawColorArray($this->colours['border']);	    $this->pdf->SetLineWidth($lineWidth);	    $this->pdf->SetFontSize($this->fontSize['title']);	    $this->pdf->SetCellPaddings($padding, 1, $padding, 1);	    	    $this->pdf->SetX($startX);	    $this->pdf->Cell($cellWidth, 0, $title, 'B', 1);	    $y = $this->pdf->GetY();	    $this->pdf->SetY($y + $lineWidth);	    $this->pdf->SetFontSize($this->fontSize['body']);	    foreach ($items as $idx => $text) {	        $color = ($idx % 2) ? $this->colours['stripe'] : $this->colours['stripe_dark'];	        $this->pdf->SetFillColorArray($color);	        $this->pdf->SetDrawColorArray($color);	        $this->pdf->SetX($startX);	        $this->pdf->MultiCell($cellWidth, $cellHeight, $text, 1, 'L', true, 1, '', '', true, 0, false, true, $cellHeight, 'M', true);	    }	}    private function hex2rgb($colour) {        if ($colour[0] == '#') {            $colour = substr($colour, 1);        }        if (strlen($colour) == 6) {            list($r, $g, $b) = [$colour[0] . $colour[1], $colour[2] . $colour[3], $colour[4] . $colour[5]];        } elseif (strlen($colour) == 3) {            list($r, $g, $b) = [$colour[0] . $colour[0], $colour[1] . $colour[1], $colour[2] . $colour[2]];        } else {            return [255, 255, 255];        }        return [hexdec($r), hexdec($g), hexdec($b)];    }}	//Class for representing physical assets like lights, switches, wireclass Physical_Asset{    public $count = 0;    public $name;    public $colour = '';    public $temp = '';    public $type = '';    function __construct($name, $count = 0, $colour = '', $temp = '', $type = 'lights')    {        $this->name = $name;        $this->count = $count;        $this->colour = $colour;        $this->temp = $temp;        $this->type = $type;    }}